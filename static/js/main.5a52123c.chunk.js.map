{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","console","log","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"2MAAe,G,MAAA,IAA0B,kC,sBCIlC,SAASA,EAAgBC,GAC5B,IAAMC,EAAcC,IAAMC,YADS,EAEDC,mBAAS,IAFR,mBAE5BC,EAF4B,KAEjBC,EAFiB,KAkBnC,OAAO,sBAAKC,UAAWP,EAAMO,UAAtB,UACC,qBAAKA,UAAU,cAAf,SACE,uBAAMC,SAjBK,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAASV,EAAYW,QAAQC,MAC/BC,EAAa,YAAOT,GAGxBS,EAAcC,QAAQ,CACpBC,QAASL,EACTM,MAAO,EACPC,GAAI,QAENZ,EAAaQ,GACbK,QAAQC,IAAIT,GACZV,EAAYW,QAAQC,MAAQ,KAIpB,UACE,0BAAUQ,IAAKpB,EAAYqB,UAAU,EAAMf,UAAU,eAAegB,KAAK,UAGzE,wBAAQC,KAAK,SAASjB,UAAU,uBAAhC,0BAGF,cAACkB,EAAD,CAAYpB,UAAWA,OAI9B,SAASoB,EAAWzB,GAAQ,IAAD,EACMI,mBAAS,IADf,mBACvBsB,EADuB,KACXC,EADW,OAEFvB,mBAAS,IAFP,mBAEvBwB,EAFuB,KAEfC,EAFe,KAwB9B,OApBAC,qBAAU,WACR,IAAMC,EAAQ,YAAI/B,EAAMK,WAAW2B,OAAON,GACtCK,EAAME,SAAWL,EAAOK,QAC1BJ,EAAUE,KAEX,CAAC/B,EAAMK,UAAWuB,EAAQF,IAE7BI,qBAAU,YC9CP,SAAoBI,GACvB,IAAMC,EAAM,IAAIC,eAIhBD,EAAIE,aADiB,OAErBF,EAAIG,KAJW,MACH,oCAIZH,EAAII,OAAS,WACTL,EAASC,EAAIK,SAAUL,EAAIM,SAE/BN,EAAIO,QAAU,SAAUC,GACtBxB,QAAQC,IAAIuB,GACZT,EAAS,CAAC,QAAW,4BAA6B,MAEpDC,EAAIS,OD0CFC,EARmB,SAACL,EAAUC,GACb,MAAXA,EACFd,EAAca,GAEdM,MAAM,uBAERnB,EAAca,QAGf,IAEIZ,EAAOmB,KAAI,SAACC,EAAMC,GACvB,OAAO,cAACC,EAAD,CAAOC,MAAOH,EAAMzC,UAAU,uCAA9B,UAA4E0C,EAA5E,kBAKN,SAASG,EAAUpD,GAAQ,IACvBmD,EAAiBnD,EAAjBmD,MAAOE,EAAUrD,EAAVqD,OADe,EAEHjD,mBAAS+C,EAAMlC,MAAQkC,EAAMlC,MAAO,GAFjC,mBAEtBA,EAFsB,KAEfqC,EAFe,OAGGlD,oBAA4B,IAAnB+C,EAAMI,UAHlB,mBAGtBA,EAHsB,KAGZC,EAHY,KAIvBjD,EAAYP,EAAMO,UAAYP,EAAMO,UAAW,yBAC/CkD,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAgBlDA,EAA0B,SAAhBL,EAAO7B,KAAP,UAA4BP,EAA5B,YAAqCwC,GAAiBA,EACtE,OAAO,yBAAQlD,UAAWA,EAAWoD,QAfjB,SAAClD,GACjBA,EAAMC,iBACc,SAAhB2C,EAAO7B,QACS,IAAb+B,GAECD,EAASrC,EAAQ,GACjBuC,GAAY,KAEZF,EAASrC,EAAQ,GACjBuC,GAAY,MAMjB,cAAsDE,EAAtD,OAGJ,SAASR,EAAMlD,GAAQ,IACnBmD,EAASnD,EAATmD,MACD5C,EAAYP,EAAMO,UAAYP,EAAMO,UAAW,0BACrD,OAAO,sBAAKA,UAAWA,EAAhB,UACL,kCAAK4C,EAAMjC,GAAX,MAAkBiC,EAAMnC,QAAxB,OACA,sBAAKT,UAAU,gBAAf,UACE,cAAC6C,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAC7B,KAAK,OAAQkC,QAAQ,WACvD,cAACN,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAC7B,KAAK,SAAUkC,QAAQ,YACzD,cAACN,EAAD,CAAWD,MAAOA,EAAOE,OAAQ,CAAC7B,KAAK,UAAWkC,QAAQ,mBEpEnDE,MAxBf,WACE,OACE,qBAAKrD,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKsD,IAAKC,EAAMvD,UAAU,WAAWwD,IAAI,SACzC,sCACO,8CADP,0BAGA,8BACG,cAAChE,EAAD,MAEH,mBACEQ,UAAU,WACVyD,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,+BCLOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCARQ,EAAQC,SAASC,eAAe,QAClCF,GACFG,IAASC,OAAO,cAAC,EAAD,IAASJ,GAE3B,IAAMK,EAAWJ,SAASC,eAAe,UACrCG,GACFF,IAASC,OAAO,cAACjF,EAAD,IAAqBkF,GAQvCd,M","file":"static/js/main.5a52123c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react' \r\n\r\nimport {loadTweets} from '../lookup'\r\n\r\nexport function TweetsComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      let tempNewTweets = [...newTweets]\r\n      //.push - adds to end of the array. \r\n      //.unshift - adds to beginning of array, we want tweets visible at beginning.\r\n      tempNewTweets.unshift({\r\n        content: newVal, \r\n        likes: 0, \r\n        id: 12313\r\n      })\r\n      setNewTweets(tempNewTweets)\r\n      console.log(newVal)\r\n      textAreaRef.current.value = ' '\r\n    }\r\n    return <div className={props.className}> \r\n            <div className='col-12 mb-3'> \r\n              <form onSubmit={handleSubmit}> \r\n                <textarea ref={textAreaRef}required={true} className='form-control' name='tweet'> \r\n\r\n                </textarea> \r\n                <button type='submit' className='btn btn-primary my-3'> Tweet </button>\r\n              </form> \r\n              </div>\r\n              <TweetsList newTweets={newTweets}/>\r\n          </div> \r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n\r\n    useEffect(() => {\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n      // do my lookup\r\n      const myCallback = (response, status) => {\r\n        if (status === 200) {\r\n          setTweetsInit(response)\r\n        } else {\r\n          alert(\"There was an error!\")\r\n        }\r\n        setTweetsInit(response)\r\n      }\r\n      loadTweets(myCallback)\r\n    }, [])\r\n  \r\n    return tweets.map((item, index) => {\r\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item-id}`}/> \r\n    }) \r\n  \r\n  }\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes: 0)\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false) \r\n    const className = props.className ? props.className: 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    \r\n    const handleClick = (event) => { \r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if(userLike === true) {\r\n                // perhaps i Unlike it? \r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            } else {\r\n                setLikes(likes + 1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}`: actionDisplay\r\n    return <button className={className} onClick={handleClick}> {display} </button>\r\n  }\r\n  \r\nexport function Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className: 'col-10 mx-auto col-md-6'\r\n    return <div className={className}> \r\n      <p> {tweet.id} - {tweet.content} </p> \r\n      <div className='btn btn-group'>\r\n        <ActionBtn tweet={tweet} action={{type:\"like\", display:\"Likes\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"unlike\", display:\"Unlike\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"retweet\", display:\"Retweet\"}}/>    \r\n      </div>\r\n    </div> \r\n  }","export function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET' // AS OPPOSED TO 'POST' METHOD\r\n    const url = \"http://localhost:8000/api/tweets\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function(){\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n  }","import React from 'react'; \nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n           <TweetsComponent/> \n        </div> \n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport reportWebVitals from './reportWebVitals';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl)\n}\nconst tweetsEl = document.getElementById(\"tweety\")\nif (tweetsEl) {\n  ReactDOM.render(<TweetsComponent />, tweetsEl)\n}\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}